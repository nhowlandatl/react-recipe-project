{"version":3,"sources":["serviceWorker.js","components/Form.js","components/Recipe.js","components/Ingredient.js","components/RecipeResults.js","index.js"],"names":["Boolean","window","location","hostname","match","Form","props","addIngredient","state","value","handleChange","bind","handleSubmit","event","this","setState","target","preventDefault","InputGroup","className","Prepend","Button","variant","onClick","FormControl","aria-describedby","type","placeholder","onChange","Component","connect","ingredients","dispatch","getRecipe","recipes","payload","ingredient","Recipe","recipeString","join","axios","then","response","console","log","data","catch","error","length","Ingredient","ingredientCard","map","Card","style","width","Container","CardDeck","RecipeResults","recipe","title","src","image","alt","clearResults","initialState","store","createStore","action","concat","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.7acb3343.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { FormControl, Button, InputGroup } from 'react-bootstrap';\n\nclass Form extends Component {\n// Need to refactor to stop using the local state\n  constructor(props) {\n    super(props);\n    this.state = {\n      value: ''\n    };\n    this.handleChange = this.handleChange.bind(this);\n    this.handleSubmit = this.handleSubmit.bind(this);\n  }\n\n  // This should change to use the Redux store to save the ingredients as an array\n  // Ingredient list can map to redux store\n  handleChange(event) {    \n    this.setState({value: event.target.value});  \n  }\n// Kick off add ingredient function on submit\n  handleSubmit(event) {\n    this.addIngredient(); \n    // this.getRecipe(); \n    event.preventDefault();\n  }\n  // Add ingredient function\n  addIngredient = () => {\n    // Here I want to add the local react state value (what was just typed) to the redux store as an ingredient\n    this.props.addIngredient(this.state.value);\n  }\n    render() {\n        return (\n            <div>\n                <InputGroup className=\"mb-3\">\n                  <InputGroup.Prepend>\n                    <Button variant=\"outline-secondary\" onClick={this.handleSubmit}>Click to add ingredient</Button>\n                  </InputGroup.Prepend>\n                  <FormControl aria-describedby=\"basic-addon1\" type=\"text\" value={this.state.value} placeholder=\"Enter an ingredient\" onChange={this.handleChange}/> \n                </InputGroup>\n            </div>\n        )\n    }\n}\n\nfunction mapStateToProps(state) {\n  return {\n    ingredients: state.ingredients\n  }\n}\n\nfunction mapDispatchToProps(dispatch) {\n  return {\n    // Need to pass in a parameter, any name, such as recipes (this is the array of recipes)\n    // It's passed in as a payload that contains all the data\n    getRecipe: function(recipes) {\n      dispatch({type: 'GET_RECIPE', payload: recipes})\n    },\n    addIngredient: function(ingredient) {\n      dispatch({type: 'ADD_INGREDIENT', payload: ingredient})\n    }\n  }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Form);","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport axios from 'axios';\nimport { Button } from 'react-bootstrap'; \n\nclass Recipe extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n    };\n    this.handleSubmit = this.handleSubmit.bind(this);\n  }\n// Use relative and absolute positioning to get this lined up correctly below the recipe cards\n// Conditional statement: if recipe array is populated, generate a submit recipe button\n  render() {\n    if (this.props.ingredients.length > 0 ) {\n      return (\n        <div>\n          <Button variant=\"outline-secondary\" onClick={this.handleSubmit}>Click to find recipes</Button>\n        </div>\n      )\n    }\n    else return null\n  }\n  \n\n  // Kick off the find recipe function on submit\n  handleSubmit(event) {\n    // convert the ingredient array into a string for Axios get request\n    this.getRecipe(); \n    // this.getRecipe(); \n    event.preventDefault();\n  }\n  \n  // Get recipe function\n  // To do: pass in the ingredients below\n    getRecipe = () => {\n      let recipeString = this.props.ingredients.join('%2');\n      return axios({\n        \"method\":\"GET\",\n        \"url\":\"https://spoonacular-recipe-food-nutrition-v1.p.rapidapi.com/recipes/findByIngredients\",\n        \"headers\":{\n        \"content-type\":\"application/octet-stream\",\n        \"x-rapidapi-host\":\"spoonacular-recipe-food-nutrition-v1.p.rapidapi.com\",\n        \"x-rapidapi-key\":\"\",\n        \"useQueryString\":true\n        },\"params\":{\n        \"number\":\"5\",\n        \"ranking\":\"1\",\n        \"ignorePantry\":\"false\",\n        \"ingredients\": `${recipeString}`\n        }\n        })\n        .then((response)=>{\n          console.log(response)\n          // Dispatches the action to redux\n          this.props.getRecipe(response.data);\n          console.log(this.props.recipes)\n          // Clear the recipeString\n          recipeString = ''\n          console.log(recipeString);\n        })\n        .catch((error)=>{\n          console.log(error)\n        })\n    }\n}\n\nfunction mapDispatchToProps(dispatch) {\n  return {\n    // Need to pass in a parameter, any name, such as recipes (this is the array of recipes)\n    // It's passed in as a payload that contains all the data\n    getRecipe: function(recipes) {\n      dispatch({type: 'GET_RECIPE', payload: recipes})\n    }\n  }\n}\n\n// Need ingredient array to pass into find recipe function\nfunction mapStateToProps(state) {\n  return {\n    // recipes: state.recipes \n    ingredients: state.ingredients,\n    recipes: state.recipes\n  }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Recipe);","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { Card, Container, CardDeck } from 'react-bootstrap'; \n\nclass Ingredient extends Component {\n    render() { \n        // console.log(this.props.ingredients) \n        // Create each ingredient card\n        let ingredientCard = this.props.ingredients.map(ingredient => {\n            return (\n                <Card style={{width: '18rem'}}>\n                {ingredient}\n                </Card>\n            )\n        })\n      // Display all the ingredients inside a card deck\n        return (\n                <div>\n                    <Container>\n                        <CardDeck>\n                            {ingredientCard}\n                        </CardDeck>\n                    </Container>\n                </div>\n            )\n      }\n  }\n\n  function mapStateToProps(state) {\n    return {\n      ingredients: state.ingredients \n    }\n  }\n  \n  export default connect(mapStateToProps)(Ingredient);","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { Card, Button, Row, Container, CardDeck } from 'react-bootstrap'; \n\nclass RecipeResults extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n        };\n        this.handleSubmit = this.handleSubmit.bind(this);\n      }\n    render() { \n        // Create each ingredient card\n        const recipes = this.props.recipes;\n        return (\n            // To do: \n            // Render out more info with each recipe\n            // How can I add a \"if array is populated, then show a clear results button\" below here?\n            <div>\n                <CardDeck>\n                    {recipes.map(recipe => {\n                        return (\n                            <Card style={{width: '18rem'}}>\n                                {recipe.title}\n                                <img src={recipe.image} alt=\"\"/>\n                            </Card>\n                        )\n                    })}\n                </CardDeck>\n                {this.props.recipes.length > 1 &&\n                    <Button variant=\"outline-secondary\" onClick={this.handleSubmit}>Clear results</Button>\n                }  \n            </div>\n        )\n      }\n    // Clear recipe results\n    handleSubmit(event) {\n        this.props.clearResults(); \n        event.preventDefault();\n    }\n  }\n  \n  function mapStateToProps(state) {\n    return {\n      recipes: state.recipes,\n      ingredients: state.ingredients\n    }\n  }\n\n  function mapDispatchToProps(dispatch) {\n    return {\n      clearResults: function() {\n        dispatch({type: 'RESET_ITEM'})\n      }\n    }\n  }\n\n  \n  export default connect(mapStateToProps, mapDispatchToProps)(RecipeResults);","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport * as serviceWorker from './serviceWorker';\nimport Form from './components/Form';\nimport Recipe from './components/Recipe';\nimport Ingredient from './components/Ingredient'; \nimport RecipeResults from './components/RecipeResults';\nimport { createStore } from 'redux';\nimport { Provider } from 'react-redux'; \n\n// Redux store setup\nconst initialState = {\n  value: '',\n  recipes: [{}],\n  ingredients: [],\n  recipeString: ''\n}\n\n// Write functions for your reducer here\nfunction reducer(state = initialState, action) {\n  switch(action.type) {\n    case 'GET_RECIPE':\n      return {\n        ...state,\n        recipes: action.payload\n      }\n    case 'ADD_INGREDIENT':\n      return {\n        ...state,\n        ingredients: state.ingredients.concat(action.payload)\n      }\n      // reset the screen to default state\n    case 'RESET_ITEM': \n      return {\n        ...state,\n        recipes: initialState.recipes,\n        ingredients: initialState.ingredients\n      }\n  default:\n    return state;\n  }\n}\n\n// Reducer store\nconst store = createStore(reducer);\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>  \n      <Form/>\n      <Ingredient/>\n      <Recipe/>\n      <RecipeResults/>\n    </Provider>  \n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n\n"],"sourceRoot":""}